{"version":3,"sources":["components/wallboardclass.js","App.js","serviceWorker.js","index.js"],"names":["parentTimer","runtimeDomain","window","location","origin","initialDate","Date","Wallboardclass","props","state","callsWaiting","longestWaiting","reservationsAccepted","tasksCanceled","averageSpeedToAnswer","loggedinAgents","updateTime","toTimeString","setTimeout","reload","request","post","console","log","fetch","then","response","json","data","SyncClient","token","document","statsList","value","CallsWaiting","workspace_statistics","realtime","tasks_by_status","pending","LongestWaiting","longest_task_waiting_age","ReservationsAccepted","cumulative","reservations_accepted","TasksCanceled","tasks_canceled","AverageSpeedToAnswer","avg_task_acceptance_time","LoggedinAgents","total_workers","activity_statistics","workers","UpdateTime","end_time","LongestWaitingTimer","setSeconds","ASA","setState","toISOString","substr","on","event","clearTimeout","classes","this","className","root","header","Typography","gutterBottom","container","Grid","spacing","item","xs","Card","card","variant","CardContent","title","color","component","align","footer","Component","withStyles","theme","flexGrow","background","minHeight","maxHeight","minWidth","position","top","fontSize","textAlign","paddingTop","bottom","maxWidth","left","bullet","display","margin","transform","pos","marginBottom","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fe1b161c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { withStyles } from \"@material-ui/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SyncClient from \"../../node_modules/twilio-sync\";\nimport request from \"request\";\n\nconst runtimeDomain = window.location.origin;\n\nvar parentTimer;\nconst initialDate = new Date();\nconst styles = (theme) => ({\n  root: {\n    flexGrow: 1,\n    background: \"whitesmoke\",\n    minHeight: \"100vh\",\n  },\n  header: {\n    flexGrow: 1,\n    maxHeight: \"12vh\",\n    minHeight: \"12vh\",\n    minWidth: \"100vw\",\n    position: \"absolute\",\n    top: 0,\n    background: \"#263962\",\n    color: \"white\",\n    fontSize: 50,\n    textAlign: \"center\",\n    paddingTop: \"3vh\",\n  },\n  footer: {\n    flexGrow: 1,\n    maxHeight: \"7vh\",\n    minHeight: \"7vh\",\n    minWidth: \"100vw\",\n    position: \"absolute\",\n    bottom: 0,\n    background: \"#263962\",\n    color: \"white\",\n    fontSize: 30,\n    textAlign: \"center\",\n    paddingTop: \"3vh\",\n  },\n  container: {\n    flexGrow: 1,\n    maxHeight: \"75vh\",\n    maxWidth: \"80vw\",\n    minWidth: \"80vw\",\n    position: \"absolute\",\n    left: \"10vw\",\n    top: \"25vh\",\n  },\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nclass Wallboardclass extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      callsWaiting: \"-\",\n      longestWaiting: \"-\",\n      reservationsAccepted: \"-\",\n      tasksCanceled: \"-\",\n      averageSpeedToAnswer: \"-\",\n      loggedinAgents: \"-\",\n      updateTime: initialDate.toTimeString(),\n    };\n  }\n\n  componentDidMount() {\n    setTimeout(function () {\n      window.location.reload();\n    }, 3600000);\n    setTimeout(function () {\n      request.post(`${runtimeDomain}/dashboardStats`);\n      console.log(\"fetching...\");\n    }, 5000);\n    fetch(`${runtimeDomain}/syncToken`)\n      .then((response) => response.json())\n      .then((data) => {\n        var syncClient = new SyncClient(data.token);\n        syncClient.document(\"dashboardStats\").then((document) => {\n          var statsList = document.value;\n          var CallsWaiting =\n            statsList.workspace_statistics.realtime.tasks_by_status.pending;\n          var LongestWaiting =\n            statsList.workspace_statistics.realtime.longest_task_waiting_age;\n          var ReservationsAccepted =\n            statsList.workspace_statistics.cumulative.reservations_accepted;\n          var TasksCanceled =\n            statsList.workspace_statistics.cumulative.tasks_canceled;\n          var AverageSpeedToAnswer =\n            statsList.workspace_statistics.cumulative.avg_task_acceptance_time;\n          var LoggedinAgents =\n            statsList.workspace_statistics.realtime.total_workers -\n            statsList.workspace_statistics.realtime.activity_statistics[2]\n              .workers;\n          var endTime = new Date(\n            statsList.workspace_statistics.cumulative.end_time\n          );\n          var UpdateTime = endTime.toTimeString();\n          var LongestWaitingTimer = new Date(null);\n          LongestWaitingTimer.setSeconds(LongestWaiting);\n          var ASA = new Date(null);\n          ASA.setSeconds(AverageSpeedToAnswer);\n          this.setState({\n            callsWaiting: CallsWaiting,\n            longestWaiting: LongestWaitingTimer.toISOString().substr(14, 5),\n            reservationsAccepted: ReservationsAccepted,\n            tasksCanceled: TasksCanceled,\n            averageSpeedToAnswer: ASA.toISOString().substr(14, 5),\n            loggedinAgents: LoggedinAgents,\n            updateTime: UpdateTime,\n          });\n          document.on(\"updated\", (event) => {\n            console.log(\n              \"Received Document update event. New value:\",\n              event.value\n            );\n            var statsList = event.value;\n            var CallsWaiting =\n              statsList.workspace_statistics.realtime.tasks_by_status.pending;\n            var LongestWaiting =\n              statsList.workspace_statistics.realtime.longest_task_waiting_age;\n            var ReservationsAccepted =\n              statsList.workspace_statistics.cumulative.reservations_accepted;\n            var TasksCanceled =\n              statsList.workspace_statistics.cumulative.tasks_canceled;\n            var AverageSpeedToAnswer =\n              statsList.workspace_statistics.cumulative\n                .avg_task_acceptance_time;\n            var LoggedinAgents =\n              statsList.workspace_statistics.realtime.total_workers -\n              statsList.workspace_statistics.realtime.activity_statistics[2]\n                .workers;\n            var endTime = new Date(\n              statsList.workspace_statistics.cumulative.end_time\n            );\n            var UpdateTime = endTime.toTimeString();\n            var LongestWaitingTimer = new Date(null);\n            LongestWaitingTimer.setSeconds(LongestWaiting);\n            var ASA = new Date(null);\n            ASA.setSeconds(AverageSpeedToAnswer);\n            this.setState({\n              callsWaiting: CallsWaiting,\n              longestWaiting: LongestWaitingTimer.toISOString().substr(14, 5),\n              reservationsAccepted: ReservationsAccepted,\n              tasksCanceled: TasksCanceled,\n              averageSpeedToAnswer: ASA.toISOString().substr(14, 5),\n              loggedinAgents: LoggedinAgents,\n              updateTime: UpdateTime,\n            });\n          });\n        });\n      });\n  }\n\n  componentDidUpdate() {\n    clearTimeout(parentTimer);\n    parentTimer = setTimeout(function () {\n      request.post(`${runtimeDomain}/dashboardStats`);\n      console.log(\"fetching...\");\n    }, 30000);\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className={classes.root}>\n        <div className={classes.header}>\n          <Typography className={classes.header} gutterBottom>\n            Service Desk Phone Queue\n          </Typography>\n        </div>\n        <div className={classes.container}>\n          <Grid container spacing={8}>\n            <Grid container item xs={12} spacing={8}>\n              <Grid item xs={4}>\n                <Card className={classes.card} variant=\"outlined\">\n                  <CardContent>\n                    <Typography\n                      className={classes.title}\n                      color=\"textSecondary\"\n                      gutterBottom\n                    >\n                      Calls Waiting\n                    </Typography>\n                    <Typography variant=\"h1\" component=\"h2\" align=\"center\">\n                      {this.state.callsWaiting}\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={4}>\n                <Card className={classes.card} variant=\"outlined\">\n                  <CardContent>\n                    <Typography\n                      className={classes.title}\n                      color=\"textSecondary\"\n                      gutterBottom\n                    >\n                      Longest Waiting Call (HH:MM:SS)\n                    </Typography>\n                    <Typography variant=\"h1\" component=\"h2\" align=\"center\">\n                      {this.state.longestWaiting}\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={4}>\n                <Card className={classes.card} variant=\"outlined\">\n                  <CardContent>\n                    <Typography\n                      className={classes.title}\n                      color=\"textSecondary\"\n                      gutterBottom\n                    >\n                      Agents Logged In\n                    </Typography>\n                    <Typography variant=\"h1\" component=\"h2\" align=\"center\">\n                      {this.state.loggedinAgents}\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n            <Grid container item xs={12} spacing={8}>\n              <Grid item xs={4}>\n                <Card className={classes.card} variant=\"outlined\">\n                  <CardContent>\n                    <Typography\n                      className={classes.title}\n                      color=\"textSecondary\"\n                      gutterBottom\n                    >\n                      Answered Calls\n                    </Typography>\n                    <Typography variant=\"h1\" component=\"h2\" align=\"center\">\n                      {this.state.reservationsAccepted}\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={4}>\n                <Card className={classes.card} variant=\"outlined\">\n                  <CardContent>\n                    <Typography\n                      className={classes.title}\n                      color=\"textSecondary\"\n                      gutterBottom\n                    >\n                      Abandoned Calls\n                    </Typography>\n                    <Typography variant=\"h1\" component=\"h2\" align=\"center\">\n                      {this.state.tasksCanceled}\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={4}>\n                <Card className={classes.card} variant=\"outlined\">\n                  <CardContent>\n                    <Typography\n                      className={classes.title}\n                      color=\"textSecondary\"\n                      gutterBottom\n                    >\n                      Average Speed to Answer (HH:MM:SS)\n                    </Typography>\n                    <Typography variant=\"h1\" component=\"h2\" align=\"center\">\n                      {this.state.averageSpeedToAnswer}\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n          </Grid>\n        </div>\n        <div className={classes.footer}>\n          <Typography className={classes.footer} gutterBottom>\n            Last updated at: {this.state.updateTime}\n          </Typography>\n        </div>\n      </div>\n    );\n  }\n}\nexport default withStyles(styles)(Wallboardclass);\n","import React from 'react';\nimport Wallboardclass from './components/wallboardclass'\n\nfunction App() {\n  return (\n    <Wallboardclass></Wallboardclass>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}